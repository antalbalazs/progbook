<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="pic/Turing.png"/>
            </imageobject>
        </mediaobject>
        <para>
	A kép nem az én tulajdonom, hanem a Magas szintű programozási nyelvek 1 nevű tárgyon kivetített előadás fóliáiról másoltam.
	</para>
	<para>
            Maga az unáris számrendszer csupa 1-esekből vagy vonalakból áll. Ilyen például, amikor a kezünkön számolunk, vagy amikor az óvodákban a gyerekek a pálcikállak rakják ki a dolgokat.
		Pontosan annyi 1-es vagy pálcika, vagy akármilyen jel kell, amennyi maga a szám értéke. például ha az 50-es számot szeretnénk felírni unárisban, akkor 50 darab 1-est kellene leírni egymás után. Éppen ezért, ebben a számrendszerben csak a természetes számokat tudjuk ábrázolni.
        </para>
	<para>
            Egy ilyen decinálisból unárisba átváltó Turing gépet mutat a fenti ábra is. Ez a gép a kapott szám utolsó számjegyéból von le egyeseket. ha a számjegy 0 akkor 9db-ot von le, ha 5 akkor 4-et. Ezzel eggyütt a levont egyeseket a tárba helyezi. Ezt minden számjeggyel megismétli. 
        </para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript>
		nyelv nem környezetfüggetlen. Na de először értsük meg, hogy mit is jelent ez a nyelv.
        </para>
	<para>
	Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> tulajdonképpen annyit jelent, hogy n darab a, majd n darab b, majd végül n darab c áll egymás után.
	Ezek a terminális szimbólumok. A szabály alapján a környezetfüggő nyelveknél bal oldalt csak egy önmagában álló nem-terminális szimbólum állhat. Azonban nem létezik olyan képzési szabály ami alapján ez a szabály teljesíthető, éppen ezért ez a nyelv nem környezetfüggetlen.
	</para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/Chomsky/nyelv.c">https://github.com/raczandras/progbook/blob/master/src/Chomsky/nyelv.c</link>
        </para>
	<para>
	A BNF (Backus-Naur-forma) használatával környezetfüggetlen nyelveket lehet leirni. Nagyon sok programozási nyelvek szintaxisai is BNF-ben vannak leirva.
	</para>
        <para>
            A programozási nyelveknek is van nyelvtana, illetve nyelvtani szabályaik. Az egyik ilyen szabály C89-ben az, hogy a for ciklus fejrészében nem lehetett változót deklarálni, éppen ezért ha a a következőképpen szeretnénk lefordítani a fenti programot:
	</para>
	<para>
		gcc -o nyelv nyelv.c -std=c89
	</para>
	<para>
		Akkor a következő hibaüzenetet kapjuk:
	</para>
	<para>
		nyelv.c:3:2: error: ‘for’ loop initial declarations are only allowed in C99 or C11 mode
	</para>
	<para>
		Ez pontosan leírja nekünk, hogy a for ciklusban deklarálni csak c99 vagy c11 módban lehet.
	</para>
	<para>
 	Éppen ezért ha -std=c89 helyett nem írunk semmit, vagy -std=c99-et írunk, akkor a program gond nélkül lefordul.
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/Chomsky/lex.l">https://github.com/raczandras/progbook/blob/master/src/Chomsky/lex.l</link> 
        </para>
	<para>
	A megoldás forrása <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/realnumber.l">Bátfai Norbert</link> tulajdona.
	</para>
        <para>
            A lexer-rel szövegelemző programokat lehet generálni az általunk megadott szabályok alapján. A program különböző részeit % jelekkel kell elválasztani egymástól. Itt a numbers változóban fogjuk számolni a valós számok darabszámát. Majd megmondjuk, hogy a digit egy 0 és 9 között lévő számot jelöl. Ezek után jön az a kódrészlet, ami megmondja a lexernek, hogy a valós számokat számolja meg. Végül pedig kiíratjuk a valós számok darabszámát.
A futtatáshoz először is telepítenünk kell a lex-et majd a forrásban található programot kell megirni.
	</para>
	<para>
		Majd azt a következőképp kell lefordítanunk:
	</para>
	<para>
                lex -o lex.c lex.l 
        </para>
	<para>
		gcc -o lex lex.c -lfl
	</para>
	<para>
		Ezzel magkapjuk a <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/Chomsky/lex.c">https://github.com/raczandras/progbook/blob/master/src/Chomsky/lex.c</link> oldalon található programot, ami a feladat megoldása.
	</para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/Chomsky/leet.l">https://github.com/raczandras/progbook/blob/master/src/Chomsky/leet.l</link>
        </para>
	<para>
	A megoldás forrása <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/l337d1c7.l">Bátfai Norbert</link> tulajdona.
	</para>
        <para>
            A leet vagy a saját formájában leírva 1337 egy, az internettel együtt elterjedt szleng nyelv, amiben a betűket különböző számokként, és egyéb ASCII karakterenként, a számokat pedig különböző betűkként ábrázoljuk.
        </para>
	<para>
           Itt is érvényes az a szabály, hogy a program egyes részeit % jelekkel kell elválasztani egymástól. Itt a legelső részben a cipher struktúrában meg vannak adva a karakterek leet formái
        </para>
	<para>
	A második részben történik az érdemi munka, először a szöveget kisbetűssé alakítja a program, majd pedig végigmegy a szövegen, és minden karaktert a neki megfelelő leet formájú karakterré alakítja át.
	</para>
	<para>
	A harmadik és egyben utolsó részben található a main amiben a lex meghívása történik.
	</para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/Chomsky/signal.c">https://github.com/raczandras/progbook/blob/master/src/Chomsky/signal.c</link> 
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            	i: Ha kapunk egy INTERACT szignált, akkor a jelkezelő fügvénnyel eldöntjük, hogy mihez
		kezdjünk azzal a szignállal, mit reagáljon rá a program.
        </para>
	<para>
            	ii: Egy forciklus ami nullától négyig megy, és a ciklus törzsében lévő művelet elvégzése előtt nő az értéke eggyel.
        </para>
	<para>
            	iii: Szintén egy forciklus, ami szintén nullától négyig megy, viszont itt már a ciklus törzsében lévő műveletek elvégzése után növekszik az értéke.
        </para>
	<para>
            	iv: Egy for ciklus, ami berakja a tomb[i]-edik helyére az i értékénél eggyel nagyobb értéket, és közben i értékét is növeli.
        </para>
	<para>
            	v: Egy for ciklus, ami addig megy, amig i kisseb mint n, illetve amig a d és s pointerek értékei megyegyeznek.
        </para>
	<para>
            	vi: Kiirunk két, az f nevű függvény által generált számot. az egyik szám az a majd a eggyel megnövelt értékének a feldolgozásából jön létre, mig a másik szám a+1 és a feldolgozásából. Fontos a sorrend.
        </para>
	<para>
            	vii: Szintén két számot irunk ki, az egyik szám az f nevű függvény által feldolgozott a nevű számból előállt érték, a másik pedig a értéke.
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            Első értelmezése: Minden számra igaz, hogy létezik tőle nagyobb y prímszám.
        </para>
	<para>
            Második értelmezése: Minden számra igaz, hogy létezik egy olyan tőle nagyobb y prímszám, hogy y+2 is prím.
        </para>
	<para>
            Harmadik értelmezése: Létezik olyan szám, amitől minden prímszám kissebb.
        </para>
	<para>
            Negyedik értelmezése: Létezik olyan szám, amitől egyik kissebb szám se prím.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a; //létrehoz egy egész típusú változót]]></programlisting>   
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a; //egy pointer, ami a memóriacímére hivatkozik]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a; //egy referencia a-ra]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5]; //5 elemű tömb aminek c a neve]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c; //egy tr nevű referencia c-re]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5]; //egy 5 elemű pointerekből álló tömb]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h (); //Egy egészre mutató mutatót visszaadó függvény]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) (); //Egy egészre mutató mutatóra mutató mutatót visszaadó függvény]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b) //Függvénymutató, ami egy egészet visszaadó függvényre mutató mutatóval visszatérő függvény]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int); //Függvénymutató, ami egy egészet visszaadó függvényre mutató mutatót visszaadó függvényre mutat]]></programlisting>            
            </listitem>            
        </itemizedlist>       

        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/Chomsky/dekla.cpp">https://github.com/raczandras/progbook/blob/master/src/Chomsky/dekla.cpp</link>  
        </para>
        <para>
            Egész: <programlisting><![CDATA[int a;]]></programlisting> 
        </para>
	<para>
            Egészre mutató mutató: <programlisting><![CDATA[int *b = &a;]]></programlisting>
        </para>
	<para>
            Egész referenciája: <programlisting><![CDATA[int &r = a;]]></programlisting>
		Itt fontos megjegyezni, hogy c-ben nincs referencia, ezért ezt a kódcsipetet érdemes g++-al forditani gcc helyett.
        </para>
	<para>
            Egészek tömbje: <programlisting><![CDATA[int c[5];]]></programlisting>            
        </para>
	<para>
            Egészek tömbjének referenciája (nem az első elemé): <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
        </para>
	<para>
            Egészre mutató mutatók tömbje: <programlisting><![CDATA[int *d[5];]]></programlisting>           
        </para>
	<para>
            Egészre mutató mutatót visszaadó függvény: <programlisting><![CDATA[int *h ();]]></programlisting>           
        </para>
	<para>
            Egészre mutató mutatót visszaadó függvényre mutató mutató:  <programlisting><![CDATA[int *(*l) ();]]></programlisting>           
        </para>
	<para>
            Egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény:   <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting> 
        </para>
	<para>
            Függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre:   <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>
        </para>
    </section>                     


</chapter>                

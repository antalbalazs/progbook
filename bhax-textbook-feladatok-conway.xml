<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
	<para>
	Tutoráltam: <link xlink:href="https://github.com/krook1024/textbook">Molnár Antal</link>
	</para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/tree/master/src/Conway/Ant">https://github.com/raczandras/progbook/tree/master/src/Conway/Ant</link>               
        </para>
	<para>
	Az osztálydiagram:
	</para>
	<mediaobject>
            <imageobject>
                <imagedata fileref="pic/hangya.png"/>
            </imageobject>
        </mediaobject>
	<para>
	A megoldás forrása, illetve az UML osztálydiagram <link xlink:href="https://bhaxor.blog.hu/2018/09/26/hangyaszimulaciok">Bátfai Norbert</link> tulajdona.
	</para>
        <para>
            Ebben a feladatban hangyákat kell szimulálni. Maga a megoldás azt a biológiai tényt alkalmazza, hogy a hangyák a való életben szagokkal, úgynevezett feromonokkal kommunikálnak egymással.
Ha például egy hangya valamilyen érdekes dolgot talált, akkor ott hagyja a nyomát, illetve megjelöli az útvonalat. Az éppen arra járó többi hangya ezt megérzi, és a legfrissebb feromon nyomát követve ők is el fognak jutni a célba. Ezeket észben tartva készítették el ezt a hangyaszimulációt.
        </para>
	<para>
	Az osztálydiagrammon belül négy egységet találhatunk, ezek a következők: Ant; Ants; AntWin; és AntThread
	</para>  
	<para>
	Ezek a programunk osztályai, ezeken az egységeken belül vannak megadva az adott osztály változóit és függvényeit. Ilyen például az AntWin egységen belül található <emphasis>width</emphasis>
és <emphasis>height</emphasis> változók, amik a képernyő hosszúságát, és szélességét adják meg.
Vagy például a <function>closeEvent()</function> és a <function>keyPressEvent()</function> függvények, amik szintén az AntWin osztály részei. Ezek alapján meghatározhatjuk, hogy az AntWin osztály a szimuláción belül a világot kezeli.
	</para>    
	<para>
	Az AntThread osztály kezeli a hangyákat, illetve azok mozgását, illetve a virtuális feromonok terjedéséről is ez az osztály gondoskodik.
	</para>
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/Conway/sejt.java">https://github.com/raczandras/progbook/blob/master/src/Conway/sejt.java</link>               
        </para>
	<para>
	A Megoldás forrása <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apb.html#conway">Bátfai Norbert</link> tulajdona.
	</para>
        <para>
            Arról, hogy mi az az életjáték, illetve, hogy mik a szabályai, a következő feladat leirásában részletesebben írok. Most legyen elég ennyi:
        </para>            
	<para>
	Ha egy négyzetnek pontosan három darab élő szomszédja van, akkor abban a négyzetben egy új sejt jön létre.
	</para>
	<para>
	Ha egy már élő sejtnek pontosan kettő vagy három darab szomszédja van, akkor az a sejt továbbra is életben marad.
	</para>
	<para>
	Ha viszont egy már meglévő élő sejtnek háromnál több élő szomszédja van (túlnépesedés), vagy kettőnél kevesebb, akkor az a sejt meghal. Ezt szimulálja az életjáték.
	</para>
	<para>
	Ezek a szabályok az <function>időFejlődés()</function> függvényben vannak lefektetve.
	</para>
	<programlisting>
	<![CDATA[if(rácsElőtte[i][j] == ÉLŐ) {
                /* Élő élő marad, ha kettő vagy három élő
                 szomszedja van, különben halott lesz. */
                    if(élők==2 || élők==3)
                        rácsUtána[i][j] = ÉLŐ;
                    else
                        rácsUtána[i][j] = HALOTT;
                }  else {
                /* Halott halott marad, ha három élő
                 szomszedja van, különben élő lesz. */
                    if(élők==3)
                        rácsUtána[i][j] = ÉLŐ;
                    else
                        rácsUtána[i][j] = HALOTT;]]>
	</programlisting>
	<para>
	Igaz ugyan, hogy az életjáték egy úgynevezett nullszemélyes játék, de ebben a példában a játékos mégis tudja irányitani kicsit a dolgokat. Ugyanis a program figyeli a billentyűzet bizonyos gombjait ( k, n ,l ,g ,s ), illetve az egér mozgását, és kattintásait is. Ezt három fügvénnyel teszi. Az <function>addKeyListener(new java.awt.event.KeyAdapter()</function> fügvénnyel figyeli a billentyűzetet. Ezen a függvényen belül egy if-else szerkezet állapitja meg, hogy éppen melyik gombot nyomta le a felhasználó a
	</para>

	<programlisting>
	<![CDATA[if(e.getKeyCode() == java.awt.event.KeyEvent.VK_K){}]]>
	</programlisting>
	<para>
	 feltétel a K betű lenyomását azonosítja, és csökkenti a sejtek méretét.
	</para>

	<programlisting>
	<![CDATA[else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_N){}]]>
	</programlisting>
	<para>
	 feltétel az N betű lenyomását azonosítja, és növeli a sejtek méretét.
	</para>

	<programlisting>
	<![CDATA[else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_S){}]]>
	</programlisting>
	<para>
	 feltétel az S betű lenyomását azonosítja, és készít egy képet a sejttérről.
	</para>

	<programlisting>
	<![CDATA[else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_G)]]>
	</programlisting>
	<para>
	 feltétel a G betű lenyomását azonosítja, gyorsítja a szimuláció sebességét.
	</para>

	<programlisting>
	<![CDATA[else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_L]]>
	</programlisting>
	<para>
	 feltétel az L betű lenyomását azonosítja, és lassítja a szimuláció sebességét.
	</para>

	<para>
	Az egér mozgását, illetve kattintásait pedig a <function>addMouseListener(new java.awt.event.MouseAdapter(){}</function> illetve a <function>addMouseMotionListener(new java.awt.event.MouseMotionAdapter(){}</function> függvények figyelik. Az egér kattintásaival egy sejt állapotát tudjuk megváltoztatni. Az egér mozgatásával pedig az összes érintett sejt élő állapotba kerül.
	</para>

    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/tree/master/src/Conway/Qt">https://github.com/raczandras/progbook/tree/master/src/Conway/Qt</link>               
        </para>
	<para>
	A megoldás forrása <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/Qt/Sejtauto/">Bátfai Norbert</link> tulajdona.
	</para>
        <para>
	Az életjátékot John Conway találta ki, és nem teljesen hiteles rá a játék kifejezés, mert ez egy úgynevezett nullszemélyes játék. Magának a játékosnak annyi a dolga, hogy megadja a kezdőalakzatot, majd pedig megfigyelheti, hogy mi lesz az eredmény.
	</para>
	<para>
	Alapja egy négyzetrácsos tér, amikben élhetnek sejtek, de minden egyes négyzetben csak egy darab sejt élhet. Magának a "játéknak" a szabályai a következők:
	</para>
	<para>
	Ha egy sejtnek kettő vagy három élő szomszédos sejtje van, akkor a sejt meg fogja élni a következő generációt. Az összes többi esetben viszont kihal a sejt, akár azért mert túl sok, akár azért mert túl kevés szomszédja van.
	</para>
	<para>
	Ahol azonban egy üres négyzetrácsnak pontosan három élő sejt a szomszédja, akkor ott új sejt jön létre.
	</para>
	<para>
	Ez mellesleg két részre osztotta az embereket. Voltak akik minen napi rutinjukká tették azt, hogy az életjátékkal "játszanak", egyfajta függők lettek, és voltak azok, akik nem értették hogy mi a jó benne.
	</para> 
	<para>
	Maga a program ugyanúgy működik, mint a java verzió. Mind a két program két darab mátrixxal dolgozik, viszont itt a teljes kód megirása helyett a Q-t is segítságül hívjuk.
	</para>      
	<para>
	A programot a következőképpen tudjuk forditani és futtatni:
	<command>qmake Sejtauto.pro</command>
	<command>make</command>
	<command>./Sejtauto</command>
	</para>
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/tree/master/src/Conway/BrainB">https://github.com/raczandras/progbook/tree/master/src/Conway/BrainB</link>               
        </para>
	<para>
	A megoldás forrása <link xlink:href="https://github.com/nbatfai/esport-talent-search">Bátfai Norbert</link> tulajdona.
	</para>
	<para>
	A programhoz szükségünk lesz az OpenCV-re, aminek a feltelepitéséhez a lépéseket <link xlink:href="https://www.learnopencv.com/install-opencv3-on-ubuntu/?fbclid=IwAR37_YdNsNE-r79VDJSDTNAoZIHDQOL0ayeN33PkrC-Gyfq89lCby7bTtEo">ezen a linken</link> elérhető weblapon találjuk.
	</para>
        <para>
            Ez egy miniatűr játék, ami a felhasználó szem-kéz koordinációjáról, illetve a megfigyelőképességéről gyűjt össze információkat.
        </para>
	<para>
	Amikor elindítjuk a játékot akkor egy ablak fogad minket, és a lényege az, hogy a <command>Samu enthropy</command> nevű négyzeten belül lévő fekete pöttyön belül tartsuk az egerünk mutatóját.
	</para>
	<para>
	A játék a teljesitményünk alapján lesz könnyebb, vagy nehezebb. Minél jöbban játszunk, annál több Enthropy lesz a képernyőn, ezáltal megnehezítve a Samu enthropy követését. Viszont ha már nem tudjuk nyomon követni a Samu enthropy-t akkor folyamatosan eltünteti a hozzáadott enthropy-kat, ezáltal megkönnyítve a játékot.
	</para>
	<para>
	Én közel két perc játék után a következő eredményeket produkáltam:
	</para>
	<programlisting>
	<![CDATA[
NEMESPOR BrainB Test 6.0.3
time      : 1164
bps       : 52830
noc       : 17
nop       : 0
lost      : 
4700 9800 
mean      : 7250
var       : 3606.24
found     : 11740 19150 12360 36950 49930 33470 38680 20860 4790 2230 16870 6500 25000 50340 
mean      : 23490
var       : 16066.3
lost2found: 2230 
mean      : 2230
var       : 0
found2lost: 
mean      : 0
var       : 0
time      : 1:56
U R about 0.136108 Kilobytes]]>
	</programlisting>
	<para>
	A programot futtatni az előző feladathoz hasonlóan szintén a <command>qmake</command> és <command>make</command> parancsokkal lehet forditani.
	</para> 
    </section>        

</chapter>                

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
	
    <section>
        <title>Encoding</title>
        <para>
	Fordítsuk le és futtassuk a Javat tanítok könyv MandelbrotHalmazNagyító.java forrását úgy, hogy a fájl nevekben és a forrásokban is meghagyjuk az ékezetes betűket!
https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/adatok.html
        </para>

        <para>
            Megoldás videó:
        </para>

        <para>
            Megoldás forrása:                
        </para>

        <para>
            Ebben a feladatban a Bátfai Norbert által megadott <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch04.html">MandelbrothalmazNagyító.java</link>
	    forrást kellett futtatni. Ezzel csupán annyi a gond, hogy a forrás tele van ékezetes betűkkel. Éppen ezért, amikor megpróbáljuk lefordítani, akkor a képen látható hibákat kapjuk:
	</para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/mandelerror.png" contentwidth="5in"/>
            </imageobject>
        </mediaobject>
	<para>
	Mint nagyon sokszor, a fordító most is a barátunk: "Unmappable character for encoding UTF-8". Vagyis a forrás kódolásával van a gond. Vagyis ezek a karakterek nem találhatóak meg az UTF-8 kódolásban. Ez azt jelenti, hogy egy másik kódolásra kell átállítani a forrást, amit a -encoding kapcsolóvan lehet bállítani. Mostmár csak arra kellett rájönni, hogy mire kellene átállítani a kódolást. Ehhez megkerestem a <link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html">Java által támogatott karakterkódolásokat.</link> Itt amire felkaptam a fejem, az a windows-1250 kódolás, aminek a leírása az, hogy a Windows Kelet Európai karakterkódolása, és arra gondolva, hogy vagy jó vagy nem, kipróbáltam hogy működik-e, és működött. Az eredmény pedig:
	</para>

	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/mandelfut.png" contentwidth="7in"/>
            </imageobject>
        </mediaobject>
    </section>

    <section>
        <title>OOCWC lexer</title>
        <para>
	Izzítsuk be az OOCWC-t és vázoljuk a https://github.com/nbatfai/robocar-emulator/blob/master/justine/rcemu/src/carlexer.ll lexert és kapcsolását a programunk OO struktúrájába!
        </para>

        <para>
            Megoldás videó:
        </para>

        <para>
            Megoldás forrása:                
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

   <section>
        <title>l334d1c4</title>
        <para>
	Írj olyan OO Java vagy C++ osztályt, amely leet cipherként működik, azaz megvalósítja ezt a betű helyettesítést: https://simple.wikipedia.org/wiki/Leet (Ha ez első részben nem tetted meg, akkor írasd ki és magyarázd meg a használt struktúratömb memóriafoglalását!)
        </para>

        <para>
            Megoldás videó:
        </para>

        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/prog2/Chomsky/Leet.java">https://github.com/raczandras/progbook/blob/master/src/prog2/Chomsky/Leet.java</link>                
        </para>

        <para>
            Ebben a feladatban a magasszintű programozási nyelvek 1 tárgyon már tárgyalt leet ciphert kellett megírni. A különbség csak annyi, hogy míg legutóbb ezt lexer segítségével kellett megcsinálni, addig most már az egészet saját magunktól kell megírni. Az én megoldásom a Leet osztállyal kezdődik:
        </para>
	<programlisting>
	<![CDATA[public class Leet {

	public static void main(String[] args) throws Exception{
		if(args.length != 2){
			System.out.println("usage: inputfile outputfile");
			System.exit(-1);
		}

		java.io.FileReader file = new java.io.FileReader(args[0]);
		java.io.FileWriter fw = new java.io.FileWriter(args[1]);

		LeetCipher lc = new LeetCipher();
		int k = 0;

		while ((k=file.read()) != -1) {
			fw.write(lc.chiper((int)Character.toUpperCase((char)k)));
		}

		file.close();
		fw.close();
	}
}]]>	</programlisting>

	<para>
	Az egész program úgy kezdődik, hogy megvizsgáljuk az argumentumok számát. Amennyiben az argumentumok száma nem kettő, úgy felvilágosítjuk a felhasználót arról, hogy hogyan kell használni a programot. Azonban ha az argumentumok száma kettő, akkor létrehozunk egy FileReadert és egy FileWritert amik a fájlok beolvasását és kiírását fogják elvégezni. Majd pedig egy while ciklusban addig olvassuk a fájlt, amíg az véget nem ér, és ki is írjuk minden egyes karakternek a leet formáját. Ezek után már csak bezárjuk a fájl beolvasót és kiírót. Ezek után következik a LeetCipher osztály:
	</para>
	<programlisting>
	<![CDATA[class LeetCipher {
	private String[] leetchars = new String[]{
	"4","8","<","[)","3","|=","6","|-|","1","_|","|<","|","|V|","|\\|","O",
	"|>","0.","|2","5","7","|_|","\\/","\\X/","}{","`/","2"
	};

	private String[] leetnums = new String[]{
	"O","I","Z","E","A","S","G","T","B","g"
	};

	public String chiper(int ch) {
		if (ch >= 65 && ch <= 90){
			return leetchars[ch - 65];
		}

		else if (ch >= 48 && ch <= 57){
			return leetnums[ch - 48];
		}
		else {
			return String.valueOf((char)ch);
		}
	}
}]]>
	</programlisting>
	<para>
	Ebben az osztályban először egy String tömböt találunk, ami a karakterek leet alakjait tárolja, majd pedig egy másik String tömb, ami pedig a számoknak megfelelő leet jeleket tárolja.
Ezek után a <function>cipher()</function> metódus, ami az átalakítást végzi. A metódus eldönti, hogy a soron következő karakter szám vagy betű e, és az annak megfelelő leet jelet adja vissza. A program működés közben pedig így néz ki:
	</para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/leet.png" contentwidth="7in"/>
            </imageobject>
        </mediaobject>
    </section>

   <section>
        <title>Full screen</title>
        <para>
	Készítsünk egy teljes képernyős Java programot!
Tipp: https://www.tankonyvtar.hu/en/tartalom/tkt/javat-tanitok-javat/ch03.html#labirintus_jatek
        </para>

        <para>
            Megoldás videó:
        </para>

        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/prog2/Chomsky/Client.java">https://github.com/raczandras/progbook/blob/master/src/prog2/Chomsky/Client.java</link>               
        </para>

        <para>
            Ebben a feladatban egy teljes képernyős java programot kellett írni, amihez én egy korábbi projektemet használtam fel. Mivel maga a program elég hosszú, ezért csak azokra a részekre koncentrálnék, ami a teljes képernyő kialakulásában szerepet játszik. Ez azt jelenti, hogy az <function>egyjatekos()</function> függvényre fogok koncentrálni, mivel a program többjátékos része nem használ grafikus felületet. De az egyjátékos részben már rögtön az első sor is fontos, hiszen létrehozunk egy GraphicsDrive-ot, ami segíteni fog a teljes képernyőre váltásban. Ezek után pedig létrehozunk egy KeyListener-t, ami az ESC gomb lenyomására fog fülelni, hiszen amennyiben a felhasználó lenyomja azt a billentyűt, akkor a program kilép.
        </para>
	<programlisting>
	<![CDATA[GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();

	KeyListener listener = new KeyListener() {
		
		@Override
		public void keyPressed(KeyEvent event){

			if(event.getKeyCode() == KeyEvent.VK_ESCAPE)		
				System.exit(0);
		}

		@Override
		public void keyReleased(KeyEvent event){}

		@Override
		public void keyTyped(KeyEvent event){}
	};]]>
	</programlisting>

	<para>
	Ezek után létrehozunk egy JFrame-t, ami tulajdonképpen az alkalmazás ablaka, és hozzá is adjuk a frame-hez a KeyListenert, majd pedig létrehozunk pár gombot, illetve szövegmezőt is, és azokhoz is hozzárendeljük a KeyListenert. Erre azért van szükség, mivel csak akkor fog működni a KeyListener-ünk, ha hozzá van rendelve ahhoz az elemhez, ami éppen fókuszban van, és nem elég csak a Frame-hez hozzárendelni. Vagyis ha a program épp egy gombra kattintásra vár, de ahhoz a gombhoz nincs hozzárendelve a KeyListener, akkor nem fog bezárulni az alkalmazás, hiába nyomogatjuk az ESC gombot (igen ezt tapasztalatból mondom sajnos).
	</para>
	<programlisting>
	<![CDATA[JFrame options = new JFrame("");
        options.setTitle("Egyjátékos mód");
	    options.addKeyListener(listener);
        options.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JTextField maxszam = new JTextField("Adja meg, hogy maximum mekkora számra lehet gondolni");
        JTextField gondolt = new JTextField("Adja meg azt a számot amire gondolt");
        JButton start = new JButton("Start");
        JButton ujra = new JButton("Újra");
        options.getContentPane().add(BorderLayout.NORTH,maxszam);
        options.getContentPane().add(BorderLayout.CENTER,gondolt);
        options.getContentPane().add(BorderLayout.SOUTH,start);
        maxszam.addKeyListener(listener);
        gondolt.addKeyListener(listener);]]>
	</programlisting>
	<para>
	Majd pedig a teljes képernyőre váltás, ami úgy történik, hogy megnézzük, hogy támogatja e a számítógépünk a teljes képernyőt a <function>gd.isFullScreenSupported()</function> függvénnyel. Ha igen, akkor undercorated-re állítjuk a frame-t, ami szükséges az igazi teljes képernyőhöz, majd pedig a <function>setFullScreenWindow()</function> függvénnyel teljes képernyőre állítjuk a frame-t.
	</para>
	<programlisting>
	<![CDATA[if (gd.isFullScreenSupported()) {
		options.setUndecorated(true);
		gd.setFullScreenWindow(options);
	}
	else{
		System.err.println("Nem jó");
		options.setSize(600, 200);
		options.setVisible(true);
	}]]>
	</programlisting>
	<para>
	Az eredmény pedig egy teljes képernyős alkalmazás:
	</para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/fullscreen.png" contentwidth="7in"/>
            </imageobject>
        </mediaobject>
    </section>

   <section>
        <title>Paszigráfia Rapszódia OpenGL full screen vizualizáció</title>
        <para>
	Lásd vis_prel_para.pdf! Apró módosításokat eszközölj benne, pl. színvilág, textúrázás, a szintek jobb elkülönítése, kézreállóbb irányítás.
        </para>

        <para>
            Megoldás videó:
        </para>

        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/prog2/Chomsky/para6.cpp">https://github.com/raczandras/progbook/blob/master/src/prog2/Chomsky/para6.cpp</link>                
        </para>

        <para>
            Ebben a feladatban a Bátfai Norbert által <link xlink:href="https://gitlab.com/nbatfai/pasigraphy-rhapsody/tree/master/para/docs">megadott</link> programon kellett apró változtatásokat elvégezni. Ehhez először fel kellett telepíteni a boost-ot, amit a következő paranccsal lehet megtenni: <emphasis>sudo apt-get install libboost-all-dev</emphasis>, illetve e mellett még az OpenGl-re is szükség van, amit pedig a következő parancs kiadásával lehet megtenni: <emphasis>sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev</emphasis> majd pedig a forráskódban a kommentekben megadott módon lehet fordítani és futtatni.
        </para>
	<para>
	Az egyik dolog, amin én módosítottam, az a színvilág, amihez a <function>glColor3f()</function> függvényt kellett használni. Ennek a függvénynek három paramétere van, az első a piros, a második a zöld, a harmadik pedig a kék szín intenzitását állítja be. Ez azt jelenti, hogy a 0.1 0.0 0.0 értékek egy sötét piros színt adnának, a 0.8 0.0 0.0 értékek pedig egy intenzív világos piros színt eredményeznek. Én egy minimalista stílussal dolgoztam, ezért a világos és sötét szürke színekkel játszadoztam, ahogy az az alábbi képen is látszani fog.
	</para>
	<para>
	A másik dolog, amin változtattam, az az irányítás. Eddig a kockákat a billenytűzeten található nyilakkal, illetve a page up és page down gombokkal lehetett forgatni. Azonban, mivel nagyítani pedig a + és - gombokkal lehet, ezért nekem a forgatás a W,A,S,D,Q,E billentyűkkel jobban kézreáll. Ehhez töröltem az <function>skeyboard()</function> függvényt, és átírtam a <function>keyboard()</function> függvényt, ami mostmár a következőképpen néz ki:
	</para>
	<programlisting>
	<![CDATA[void keyboard ( unsigned char key, int x, int y )
{
        if ( key == '0' ) {
                index=0;
        } else if ( key == '1' ) {
                index=1;
        } else if ( key == '2' ) {
                index=2;
        } else if ( key == '3' ) {
                index=3;
        } else if ( key == '4' ) {
                index=4;
        } else if ( key == '5' ) {
                index=5;
        } else if ( key == '6' ) {
                index=6;
        } else if ( key == 'f' ) {
                transp = !transp;
        } else if ( key == '-' ) {
                ++fovy;

                glMatrixMode ( GL_PROJECTION );
                glLoadIdentity();
                gluPerspective ( fovy, ( float ) w/ ( float ) h, .1f, 1000.0f );
                glMatrixMode ( GL_MODELVIEW );

        } else if ( key == '+' ) {
                --fovy;

                glMatrixMode ( GL_PROJECTION );
                glLoadIdentity();
                gluPerspective ( fovy, ( float ) w/ ( float ) h, .1f, 1000.0f );
                glMatrixMode ( GL_MODELVIEW );

        }

	else if ( key == 'w' ) {
                cubeLetters[index].rotx += 5.0;
        } else if ( key == 's' ) {
                cubeLetters[index].rotx -= 5.0;
        } else if ( key == 'd' ) {
                cubeLetters[index].roty -= 5.0;
        } else if ( key == 'a' ) {
                cubeLetters[index].roty += 5.0;
        } else if ( key == 'q' ) {
                cubeLetters[index].rotz += 5.0;
        } else if ( key == 'e' ) {
                cubeLetters[index].rotz -= 5.0;
        }

        glutPostRedisplay();

}]]>
	</programlisting>
	<para>
	Azt, hogy mostmár más gombokkal kell forgatni a kockákat, ugyan nem tudom megmutatni, de az új színeket viszon igen, amik a következőképpen néznek ki:
	</para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/cube.png" contentwidth="6in"/>
            </imageobject>
        </mediaobject>
    </section>

   <section>
        <title>Paszigráfia Rapszódia LuaLaTeX vizualizáció</title>
        <para>
	Lásd vis_prel_para.pdf! Apró módosításokat eszközölj benne, pl. színvilág, még erősebb 3D-s hatás.
        </para>

        <para>
            Megoldás videó:
        </para>

        <para>
            Megoldás forrása:                
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

   <section>
        <title>Perceptron osztály</title>
        <para>
	Dolgozzuk be egy külön projektbe a projekt Perceptron osztályát! Lásd https://youtu.be/XpBnR31BRJY
        </para>

        <para>
            Megoldás videó:
        </para>

        <para>
            Megoldás forrása:                
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>


</chapter>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
	
    <section>
        <title>Port scan</title>
        <para>
	Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/prog2/Lauda/KapuSzkenner.java">https://github.com/raczandras/progbook/blob/master/src/prog2/Lauda/KapuSzkenner.java</link>              
        </para>
        <para>
            Ebben a feladatban a kivételkezelésre kellett rámutatni a megadott forrásban. Nézzük is meg magát a forráskódot, illetve azt, hogy milyen eredményt ad a program futtatás közben:
        </para>
	<programlisting>
	<![CDATA[public class KapuSzkenner {    
    public static void main(String[] args) {
        
        for(int i=0; i<1026; ++i)
            
            try {                
                java.net.Socket socket = new java.net.Socket(args[0], i);
                
                System.out.println(i + " figyeli");
                
                socket.close();
                
            } catch (Exception e) {
                
                System.out.println(i + " nem figyeli");               
            }
    }   
}]]>
	</programlisting>
	<para>
	És a kép a futtatásról:
	</para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/port.png" contentwidth="7in"/>
            </imageobject>
        </mediaobject>
	<para>
	Ebből annyit tudunk meg, hogy van egy for ciklus, ami 0-tól 1025-ig fut. Azon belül van egy try-catch szerkezet. A try-ban létrehozunk egy socket objektumot aminek ip címnek a legelső argumentum értékét, portnak pedig i aktuális értékét adjuk. Ilyenkor a program megpróbál a program egy TCP kapcsolatot létrehozni. Ha ez az utasítás nem dob exception-t, akkor kiiratjuk, hogy egy szerver folyamat figyeli a portot, vagy röviden: figyeli, és bezárja a program a socketet. Azonban, ha itt exception-t dob a program, akkor kiirja, hogy nem figyeli. Ezután egy kicsit módosítottam a programot annak érdekében, hogy megtudjam azt, hogy milyen exceptiont dob pontosan a try. A következő eredményt kaptam:
	</para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/port2.png" contentwidth="7in"/>
            </imageobject>
        </mediaobject>
	<para>
	Mint azt láthatjuk, ha nem sikerül kialakítani a kapcsolatot, akkor egy ConnectException-t kapunk. Az oracle <link xlink:href="https://docs.oracle.com/javase/7/docs/api/java/net/ConnectException.html">dokumentációja</link> tisztán és érthetően megmagyarázza, hogy a ConnectException jelzi azt, hogy hiba történt egy socket egy távoli címhez és porthoz történő csatlakoztatásakor. Általában a kapcsolatot távolról tagadják meg, pl: egy folyamat sem figyeli a cím adott portját. Vagyis, ha sikerül kapcsolatot létrehoznia a programnak, akkor tudja, hogy azt a portot figyelik, ha pedig nem, akkor pedig tudja azt, hogy nem figyelik.
	</para>
    </section>

   <section>
        <title>AOP</title>
        <para>
	Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési
feladat volt korábban.)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/raczandras/progbook/tree/master/src/prog2/Lauda/aop">https://github.com/raczandras/progbook/tree/master/src/prog2/Lauda/aop</link>              
        </para>
        <para>
            Ebben a feladatban egy átszövő vonatkozást kellett írni az LZWBinFa java átiratába. Mivel az eredeti forráshoz semmit nem kellett hozzáírni, ezért arról nem is beszélnék, hanem térjünk is át rögtön az átszövő vonatkozásra. Ezt a feladatot Aspectj-vel kellett megvalósítani, ami lehetőséget ad arra, hogy anélkül módosítsuk egy program forráskódját, hogy ténylegesen módosítanánk azt a forráskódot. Itt is pontosan ugyan ez történt. Meg kellett adni kódcsipeteket egy külön fájlban, amiknek megmondhattuk, hogy egy adott metódus előtt vagy után fussanak le. Az Aspectj telepítését linuxon a következő parancs kiadásával lehet megtenni: <command>apt install aspectj</command>. Ha ez sikerült, akkor fordítani pedig nem a <command>javac</command>, hanem az <command>ajc</command> parancs kiadásával kell. Ha jól emlékszem BevProg védési feladat volt, hogy in és post order módon is irassuk ki a fát. Itt most ugyan ezt valósítottam meg aspectj segítségével. Nézzük is a kód első részletét:
        </para>
	<programlisting>
	<![CDATA[import java.io.FileNotFoundException;
import java.io.PrintWriter;

public aspect BinFa{
	int melyseg = 0;

	public pointcut callkiir(LzwBinFa fa, LzwBinFa.Csomopont n, PrintWriter os):call(void LzwBinFa.kiir(LzwBinFa.Csomopont, PrintWriter)) && args(n,os) && target(fa) && within(LzwBinFa);

	after(LzwBinFa fa, LzwBinFa.Csomopont n, PrintWriter os):callkiir(fa,n,os){


	}

	public pointcut hivas(LzwBinFa.Csomopont n, PrintWriter os): call(void LzwBinFa.kiir(LzwBinFa.Csomopont, PrintWriter)) && args(n,os);

	after(LzwBinFa.Csomopont n, PrintWriter os) : hivas(n, os){

		try{
			kiirPre(n, new PrintWriter("preorder.txt"));
		}
		catch(FileNotFoundException e) {
			System.out.println(e);
		}

		melyseg = 0;

		try{
			kiirPost(n,new PrintWriter("postorder.txt"));
		}
		catch(FileNotFoundException e){
			System.out.println(e);
		}
	}]]>
	</programlisting>
	<para>
	Először is importáljuk a PrintWritert és a FileNotFoundException-t, hiszen ezeket használni fogjuk. Majd pedig megmondjuk a programnak, hogy az után, hogy ha meghívódik az eredeti programban az <function>LzwBinFa.kiir()</function> metódus, akkor annak a metódusnak az argumentumait elkérjük, és mután lefutott, próbálja meg lefuttatni a <function>kiirPre()</function> valamint a <function>kiirPost()</function> függvényeket. Nyílvánvalóan itt kaphatunk FileNotFound exceptiont, éppen ezért ezt try-catch blokkba írjuk, és kezeljük.
	</para>

	<programlisting>
	<![CDATA[public void kiirPost(LzwBinFa.Csomopont elem, java.io.PrintWriter os) {

	 if(elem != null) {
		++melyseg;
		
		
		kiirPost(elem.nullasGyermek(), os);
		kiirPost(elem.egyesGyermek(),os);	

		for(int i = 0; i < melyseg; i++){
			os.print("---");
		}
		os.print(elem.getBetu());
		os.print("(");
		os.print(melyseg -1);
		os.println(")");

		
		--melyseg;
	 }
	}

	public void kiirPre(LzwBinFa.Csomopont elem, java.io.PrintWriter os) {

	 if(elem != null) {
		++melyseg;

		for(int i = 0; i < melyseg; i++){
			os.print("---");
		}
		os.print(elem.getBetu());
		os.print("(");
		os.print(melyseg -1);
		os.println(")");

		kiirPre(elem.nullasGyermek(), os);
		kiirPre(elem.egyesGyermek(),os);		
		--melyseg;
	 }
	}]]>
	</programlisting>
	<para>
	A maradék része a kódnak pedig a két függvény. Az eredeti programban a fát in order módon járta be a program, azaz először az adott elem bal oldali gyerekét dolgozta fel, aztán az adott elemet, és végül pedig az adott elem bal oldali gyerekét. Ezzel szemben itt az első függvény a Post order bejárás, ahol jól láthatóan először az adott elem bal oldali gyerekét dolgozza fel a függvény, aztán az adott elem jobb oldali gyerekét, és végül pedig magát az elemet. A második függvény pedig a pre order bejárás, ahol először az adott elemet dolgozza fel a függvény, majd pedig az adott elem bal oldali gyerekét, és végül pedig az adott elem jobb oldali gyerekét. Ez a két függvény vég számon tartja és kiirja a fa mélységét is. Végül pedig kép az eredményről:
	</para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/aop.png" contentwidth="6in"/>
            </imageobject>
        </mediaobject>
    </section>

   <section>
        <title>Android Játék</title>
        <para>
	Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Projekt forrása: <link xlink:href="https://github.com/raczandras/progbook/tree/master/src/prog2/Lauda/KoPapirOllo">https://github.com/raczandras/progbook/tree/master/src/prog2/Lauda/KoPapirOllo</link>             
        </para>
	<para>
	    Main forrása: <link xlink:href="https://github.com/raczandras/progbook/blob/master/src/prog2/Lauda/KoPapirOllo/app/src/main/java/com/example/kopapirollo/MainActivity.java">https://github.com/raczandras/progbook/blob/master/src/prog2/Lauda/KoPapirOllo/app/src/main/java/com/example/kopapirollo/MainActivity.java</link>
	</para>
        <para>
            Ebben a feladatban egy egyszerű android játékot kellett készíteni. Én egy kő papír olló játékot készítettem számítógép ellen az Android Studio segítségével.
        </para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/kopapir.png" contentwidth="6in"/>
            </imageobject>
        </mediaobject>
	<para>
	Először is kerestem három szabadon felhasználható képet, amiket fel tudnék használni a játékhoz. Ezeket belehelyeztem a drawable mappába. A GUI létrehozása egyszerű, mivel szimplán csak be kell húzgálni a kívánt elemeket, illetve nevet és értéket adni azoknak. A fentebbi képen jól látható, hogy két képet helyeztem fel. Az egyik a számítógép legutóbbi választását mutatja, a másik pedig a játékosét. Találunk még három szövegablakot is. A legfelső megmagyarázza, hogy az első kép a játékos választását, a második szövegablak pedig azt, hogy a második kép pedig a számítógép választását mutatja. Ez a két szöveg nem fog változni a játék alatt. A harmadik szövegrész pedig a játék jelenlegi állását mutatja. Végül pedig található három gomb, amikkel a játékos a választását tudja jelezni a programnak. Most pedig nézzük a forrást.
	</para>
	<programlisting>
	<![CDATA[public class MainActivity extends AppCompatActivity {
    Button b_rock, b_scissors, b_paper;
    TextView tv_score;
    ImageView iv_ComputerChoice, iv_HomanChoice;

    int HumanScore, ComputerScore = 0;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        b_paper = (Button) findViewById(R.id.b_paper);
        b_scissors = (Button) findViewById(R.id.b_scissors);
        b_rock = (Button) findViewById(R.id.b_rock);

        iv_ComputerChoice = (ImageView) findViewById(R.id.iv_ComputerChoice);
        iv_HomanChoice = (ImageView) findViewById(R.id.iv_HumanChoice);

        tv_score = (TextView) findViewById(R.id.tv_score);]]>
	</programlisting>
	<para>
	Először is létrehozzuk a gombokat, a képeket, illetve egy szövegrészt is, valamint összekapcsoljuk őket a GUI-n lévő elemekkel. Megfigyelhető, hogy a két nem változó szövegrészhet nem csatolunk semmit. Ez pontosan azért van, mert semmit nem szeretnénk csinálni velük, éppen ezért nincs is rájuk szükség. Ezen kívűl még létrejön két változó, amik a játékos és a gép eredményeit fogják számontartani. Ezek után jönnek a gombokra kattintást figyelő listenerek:
	</para>
	<programlisting>
	<![CDATA[ @Override
            public void onClick(View view) {
                iv_HomanChoice.setImageResource(R.drawable.papir);
                String message = play_turn("paper");
                Toast.makeText(MainActivity.this, message, Toast.LENGTH_SHORT).show();

                tv_score.setText("Score: Human: "+ Integer.toString(HumanScore) + "  Computer: "+ Integer.toString(ComputerScore));
            }
        });

        b_rock.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                iv_HomanChoice.setImageResource(R.drawable.ko);
                String message = play_turn("rock");
                Toast.makeText(MainActivity.this, message, Toast.LENGTH_SHORT).show();
                tv_score.setText("Score: Human: "+ Integer.toString(HumanScore) + "  Computer: "+ Integer.toString(ComputerScore));
            }
        });

        b_scissors.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                iv_HomanChoice.setImageResource(R.drawable.ollo);
                String message = play_turn("scissors");
                Toast.makeText(MainActivity.this, message, Toast.LENGTH_SHORT).show();
                tv_score.setText("Score: Human: "+ Integer.toString(HumanScore) + "  Computer: "+ Integer.toString(ComputerScore));
            }
        });]]>
	</programlisting>
	<para>
	Mind a három esetben a játékos választását jelző képet átállítjuk a megfelelő képre, majd pedig létrehozunk egy stringet, aminek az értéke a <function>play_turn()</function> függvény által kapott eredmény lesz. Ennek a függvénynek az attribútuma a játékos választása. Majd pedig megjelenítünk egy kis üzenetet, ami a legalsó képen látható, illetve beállítjuk az eredményt mutató szövegrész értékét a megfelelő értékre. Végül pedig nézzük a <function>play_turn()</function> függvényt:
	</para>
	<programlisting>
	<![CDATA[public String play_turn( String player_choice) {
        String computer_choice = "";
        Random r = new Random();

        int computer_choice_number = r.nextInt(3)+1;

        if(computer_choice_number == 1){
            computer_choice = "rock";
            iv_ComputerChoice.setImageResource(R.drawable.ko);
        }

        if(computer_choice_number == 2){
            computer_choice = "scissors";
            iv_ComputerChoice.setImageResource(R.drawable.ollo);
        }

        if(computer_choice_number == 3){
            computer_choice = "paper";
            iv_ComputerChoice.setImageResource(R.drawable.papir);
        }

        if(computer_choice.equals(player_choice)) {
            return "Draw. Nobody won.";
        }

        else if(computer_choice.equals("rock") && player_choice.equals("scissors") ) {
            ComputerScore++;
            return "Rock crushes scissors. Computer wins";
        }
        else if(computer_choice.equals("rock") && player_choice.equals("paper") ) {
            HumanScore++;
            return "Paper covers rock. You win";
        }
        else if(computer_choice.equals("scissors") && player_choice.equals("rock") ) {
            HumanScore++;
            return "Rock crushes scissors. You win!";
        }
        else if(computer_choice.equals("scissors") && player_choice.equals("paper") ) {
            ComputerScore++;
            return "Scissors cuts paper. Computer wins!";
        }
        else if(computer_choice.equals("paper") && player_choice.equals("scissors") ) {
            HumanScore++;
            return "Scissors cuts paper. You win!";
        }
        else if(computer_choice.equals("paper") && player_choice.equals("rock") ) {
            ComputerScore++;
            return "Paper Covers rock. Computer wins!";
        }
        else return "Not Sure";
    }]]>
	</programlisting>
	<para>
	Itt először is generálunk egy random számot 1 és 3 között, amivel meghatározzuk a gép választását. Majd pedig a sok if-else-if szerkezettel eldönti a program, hogy ki nyert. Ha a gép és a játékos is ugyan azt választotta, akkor döntetlen. Amennyiben a gép nyer, úgy megnöveljük a ComputerScore értékét, és azt adja vissza a függvény, hogy a gép nyert. Míg ha a játékos nyer, akkor a HumanScore változó értéke lesz 1-el megnövelve, és azzal tér vissza a függvény, hogy a játékos nyert. És kezdődik az egész előről. Néhány kép a játék működéséről:
	</para>
	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/kopapir1.jpg" contentwidth="2in"/>
            </imageobject>
        </mediaobject>

	<mediaobject>
            <imageobject>
		<imagedata fileref="pic/kopapir2.jpg" contentwidth="2in"/>
            </imageobject>
        </mediaobject>
    </section>

   <section>
        <title>Junit teszt</title>
        <para>
	A https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat
poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat
volt korábban).
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

   <section>
        <title>OSCI</title>
        <para>
	Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit irányítasz az úton. A kocsi
állapotát minden pillanatban mentsd le. Ezeket add át egy Prolog programnak, ami egyszerű reflex
ágensként adjon vezérlést a kocsinak, hasonlítsd össze a kézi és a Prolog-os vezérlést. Módosítsd
úgy a programodat, hogy ne csak kézzel lehessen vezérelni a kocsit, hanem a Prolog reflex ágens
vezérelje!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

</chapter>
